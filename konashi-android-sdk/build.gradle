apply plugin: 'com.android.library'
apply plugin: 'groovyx.grooid.groovy-android'

def versionMajor = 2
def versionMinor = 1
def versionPatch = 2
def versionBuild = 1

def sdkVersionCode = versionMajor * 1000 + versionMinor * 100 + versionPatch * 10 + versionBuild
def sdkVersionName = "${versionMajor}.${versionMinor}.${versionPatch}"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 22
        versionCode sdkVersionCode
        versionName sdkVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    packagingOptions {
        exclude 'asm-license.txt'
        exclude 'LICENSE'
        exclude 'LICENSE.txt'
        exclude 'NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'info.izumin.android:bletia:1.3.5'

    androidTestCompile 'com.android.support.test:runner:0.3'
    androidTestCompile 'com.android.support.test:rules:0.3'
    androidTestCompile 'org.mockito:mockito-core:1.9.5'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestCompile 'com.squareup.assertj:assertj-android:1.0.1'

    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
}


apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

group = 'com.uxxu.konashi'
version = sdkVersionName

def siteUrl = 'https://github.com/YUKAI/konashi-android-sdk'
def gitUrl = 'https://github.com/YUKAI/konashi-android-sdk.git'

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')

    publish = true
    configurations = ['archives']
    pkg {
        repo = 'maven'
        name = project.name
        userOrg = 'konashi-dev'
        desc = 'konashi SDK for Android'
        websiteUrl = siteUrl
        issueTrackerUrl = "${siteUrl}/issues"
        vcsUrl = gitUrl
        licenses = ['Apache-2.0']
        labels = ['aar', 'android', 'konashi', 'BLE']
        publicDownloadNumbers = true
        version {
            name = sdkVersionName
            desc = "konashi Android SDK ${sdkVersionName}"
            released  = new Date()
            vcsTag = sdkVersionName
        }
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'konashi-android-sdk'
                url siteUrl
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'izumin5210'
                        name 'Masayuki IZUMI'
                        email 'masayuki@izumin.info'
                    }
                    developer {
                        id 'e10dokup'
                        name 'Yoshihiro WADA'
                        email '1365196t@stu.kobe-u.ac.jp'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}
